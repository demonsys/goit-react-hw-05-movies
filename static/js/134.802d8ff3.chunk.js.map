{"version":3,"file":"static/js/134.802d8ff3.chunk.js","mappings":"4OAIe,SAASA,IAAU,IAAD,EAC/B,GAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAK,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,IAC3CC,EAAAA,EAAAA,YAAU,WACM,KAAVF,IACJG,EAAAA,EAAAA,IAAaH,GAAOI,KAAKV,EAC1B,GAAE,CAACM,IAMJ,OACE,4BACE,kBAAMK,SAPW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAaF,EAAMG,OAAOC,SAASC,YAAYC,MACrDf,EAAgB,CAAEG,MAAOQ,GAC1B,EAGG,WACE,kBACEK,KAAK,OACLC,KAAK,cACLC,YAAY,oBACZC,aAAa,QAEf,mBAAQH,KAAK,SAAb,wBAEF,kBACCpB,IACC,wBACGA,EAAQwB,KAAI,SAAAC,GAAK,OAChB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMxB,GAAhD,SACGoB,EAAMK,OAASL,EAAMJ,QAFjBI,EAAME,GADC,QAW3B,C,+LC1CKI,EAAW,gCACXC,EAAU,mCAKVC,EAAe,mCAAG,WAAMC,GAAN,uFACCC,EAAAA,EAAAA,IAAUJ,EAAW,SAAWG,EAAS,CAC9DE,OAAQ,CACNC,QAASL,KAHS,cAChBM,EADgB,yBAMfA,EAASC,MANM,2CAAH,sDASfC,EAAW,mCAAG,oGACKL,EAAAA,EAAAA,IAAUJ,EAAW,qBAAsB,CAChEK,OAAQ,CACNC,QAASL,KAHK,cACZM,EADY,yBAMXA,EAASC,KAAKvC,SANH,2CAAH,qDASXyC,EAAO,mCAAG,WAAMC,GAAN,uFACSP,EAAAA,EAAAA,IACrBJ,EAAW,SAAWW,EAAW,WACjC,CACEN,OAAQ,CACNC,QAASL,KALD,cACRM,EADQ,yBASPA,EAASC,KAAKI,MATP,2CAAH,sDAYPC,EAAU,mCAAG,WAAMF,GAAN,uFACMP,EAAAA,EAAAA,IACrBJ,EAAW,SAAWW,EAAW,WACjC,CACEN,OAAQ,CACNC,QAASL,KALE,cACXM,EADW,yBASVA,EAASC,KAAKvC,SATJ,2CAAH,sDAYVU,EAAY,mCAAG,WAAMH,GAAN,uFACI4B,EAAAA,EAAAA,IAAUJ,EAAW,eAAgB,CAC1DK,OAAQ,CACNC,QAASL,EACTzB,MAAAA,KAJe,cACb+B,EADa,yBAOZA,EAASC,KAAKvC,SAPF,2CAAH,qD","sources":["pages/Movies.jsx","services/themoviedb-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from 'services/themoviedb-api';\n\nexport default function Movies() {\n  const [results, setResults] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const query = searchParams.get('query') ?? '';\n  useEffect(() => {\n    if (query === '') return;\n    searchMovies(query).then(setResults);\n  }, [query]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    const inputValue = event.target.elements.searchInput.value;\n    setSearchParams({ query: inputValue });\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchInput\"\n          placeholder=\"Enter movie title\"\n          autoComplete=\"on\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <br />\n      {results && (\n        <ul>\n          {results.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title || movie.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b40401eeb8ead0377250c446133586af';\n// const IMAGES_URL = 'https://image.tmdb.org/t/p';\n// const IMAGE_SIZE = '/w500';\n// Возможные размеры: \"w154\",\"w185\",\"w342\",\"w500\",\"w780\",\"original\"\n\nconst getMovieDetails = async movieId => {\n  const response = await axios.get(BASE_URL + 'movie/' + movieId, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst getTrending = async () => {\n  const response = await axios.get(BASE_URL + 'trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nconst getCast = async movie_id => {\n  const response = await axios.get(\n    BASE_URL + 'movie/' + movie_id + '/credits',\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data.cast;\n};\n\nconst getReviews = async movie_id => {\n  const response = await axios.get(\n    BASE_URL + 'movie/' + movie_id + '/reviews',\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data.results;\n};\n\nconst searchMovies = async query => {\n  const response = await axios.get(BASE_URL + 'search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n};\n\nexport { getMovieDetails, getTrending, getCast, getReviews, searchMovies };\n"],"names":["Movies","useState","results","setResults","useSearchParams","searchParams","setSearchParams","location","useLocation","query","get","useEffect","searchMovies","then","onSubmit","event","preventDefault","inputValue","target","elements","searchInput","value","type","name","placeholder","autoComplete","map","movie","to","id","state","from","title","BASE_URL","API_KEY","getMovieDetails","movieId","axios","params","api_key","response","data","getTrending","getCast","movie_id","cast","getReviews"],"sourceRoot":""}